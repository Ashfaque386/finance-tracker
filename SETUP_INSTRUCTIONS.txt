===========================================
MONEY MANAGER - SETUP INSTRUCTIONS
===========================================

ðŸ“‹ TABLE OF CONTENTS
--------------------
1. System Requirements
2. Desktop Testing Setup
3. Android APK Build Setup
4. Running the App
5. Generating Sample Data
6. Troubleshooting


ðŸ“Œ 1. SYSTEM REQUIREMENTS
-------------------------

For Desktop Testing:
- Python 3.8 or higher
- pip (Python package manager)
- 4GB RAM minimum
- Windows 10/11, macOS 10.14+, or Linux

For Android APK Building:
- Linux or macOS (WSL2 on Windows)
- Python 3.8 or higher
- Java JDK 8 or 11
- Android SDK
- 8GB RAM minimum
- 20GB free disk space


ðŸ“Œ 2. DESKTOP TESTING SETUP
----------------------------

Step 1: Install Python Dependencies

    pip install -r requirements.txt

Step 2: Generate Sample Data (Optional)

    python sample_data.py

Step 3: Run the App

    python run_desktop.py

    OR

    python main.py


ðŸ“Œ 3. ANDROID APK BUILD SETUP
------------------------------

Linux/macOS:
------------

Step 1: Install System Dependencies

    # Ubuntu/Debian
    sudo apt update
    sudo apt install -y python3-pip build-essential git zip unzip \
        openjdk-11-jdk autoconf libtool pkg-config zlib1g-dev \
        libncurses5-dev libncursesw5-dev libtinfo5 cmake \
        libffi-dev libssl-dev

    # macOS (using Homebrew)
    brew install python3 autoconf automake libtool pkg-config

Step 2: Install Buildozer

    pip install buildozer cython

Step 3: Install Android SDK/NDK (Buildozer will do this automatically)

Step 4: Build APK

    chmod +x build_apk.sh
    ./build_apk.sh

    OR

    buildozer -v android debug


Windows (Using WSL2):
--------------------

Step 1: Install WSL2
    - Open PowerShell as Administrator
    - Run: wsl --install
    - Restart computer

Step 2: Install Ubuntu from Microsoft Store

Step 3: Open Ubuntu terminal and follow Linux instructions above


ðŸ“Œ 4. RUNNING THE APP
----------------------

Desktop Testing:

    python run_desktop.py

    Controls:
    - Use mouse to click buttons
    - Window size simulates mobile screen (360x640)

Android Device:

    # After building APK
    adb install bin/MoneyManager-*.apk

    # Or transfer APK to device and install manually


ðŸ“Œ 5. GENERATING SAMPLE DATA
-----------------------------

To populate the app with test data:

    python sample_data.py

This will create:
- 3 sample accounts
- 90 days of transactions
- 5 budgets
- 3 savings goals
- 2 debt entries
- 2 recurring transactions


ðŸ“Œ 6. TROUBLESHOOTING
---------------------

Issue: "ModuleNotFoundError: No module named 'kivymd'"
Solution: pip install kivymd

Issue: "No module named 'matplotlib'"
Solution: pip install matplotlib

Issue: Charts not displaying
Solution: Make sure 'charts' directory is created (app creates it automatically)

Issue: Database errors on startup
Solution: Delete 'money_manager.db' file and restart app

Issue: Buildozer fails on Windows
Solution: Use WSL2 (see Section 3) or test on desktop first

Issue: APK build fails with "SDK not found"
Solution: Let buildozer download SDK automatically, or set paths in buildozer.spec

Issue: App crashes on Android
Solution: Check logcat for errors:
    adb logcat | grep python


===========================================
PROJECT STRUCTURE
===========================================

MoneyManager/
â”‚
â”œâ”€â”€ main.py                 # Main application file
â”œâ”€â”€ run_desktop.py          # Desktop testing script
â”œâ”€â”€ sample_data.py          # Sample data generator
â”œâ”€â”€ requirements.txt        # Python dependencies
â”œâ”€â”€ buildozer.spec          # APK build configuration
â”œâ”€â”€ build_apk.sh            # Linux/Mac build script
â”œâ”€â”€ build_apk.bat           # Windows build script (WSL helper)
â”‚
â”œâ”€â”€ models/                 # Data models
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ transaction.py
â”‚   â”œâ”€â”€ account.py
â”‚   â”œâ”€â”€ budget.py
â”‚   â”œâ”€â”€ goal.py
â”‚   â”œâ”€â”€ debt.py
â”‚   â”œâ”€â”€ category.py
â”‚   â””â”€â”€ recurring.py
â”‚
â”œâ”€â”€ utils/                  # Utility modules
â”‚   â”œâ”€â”€ __init__.py
â”‚   â”œâ”€â”€ database.py         # SQLite database manager
â”‚   â”œâ”€â”€ chart_utils.py      # Chart generation
â”‚   â”œâ”€â”€ file_io.py          # Import/Export/Backup
â”‚   â”œâ”€â”€ currency_converter.py
â”‚   â”œâ”€â”€ reminders.py
â”‚   â””â”€â”€ security.py
â”‚
â”œâ”€â”€ kv/                     # UI layout files
â”‚   â”œâ”€â”€ dashboard.kv
â”‚   â”œâ”€â”€ transactions.kv
â”‚   â”œâ”€â”€ reports.kv
â”‚   â”œâ”€â”€ accounts.kv
â”‚   â”œâ”€â”€ budgets.kv
â”‚   â”œâ”€â”€ goals.kv
â”‚   â””â”€â”€ settings.kv
â”‚
â”œâ”€â”€ charts/                 # Generated charts (auto-created)
â”œâ”€â”€ backups/                # Database backups (auto-created)
â””â”€â”€ money_manager.db        # SQLite database (auto-created)


===========================================
FEATURES IMPLEMENTED
===========================================

âœ… Transaction Management
   - Add/Edit/Delete transactions
   - Expense, Income, Transfer types
   - Categories and subcategories
   - Tags and descriptions
   - Multiple payment methods

âœ… Account Management
   - Multiple accounts (Bank, Cash, Card, etc.)
   - Account balances
   - Credit card support
   - Account transfers

âœ… Budgets
   - Set budgets per category
   - Track spending against budget
   - Alert thresholds
   - Visual progress indicators

âœ… Goals & Savings
   - Create savings goals
   - Track progress
   - Deadline management
   - Goal contributions

âœ… Reports & Analytics
   - Pie charts (expenses by category)
   - Line charts (spending trends)
   - Bar charts (income vs expense)
   - Period filtering (week/month/year)
   - Category summaries

âœ… Recurring Transactions
   - Daily, Weekly, Monthly, Yearly
   - Custom intervals
   - Auto-creation option

âœ… Debts & Loans
   - Track money lent/borrowed
   - Due dates
   - Payment tracking

âœ… Data Management
   - Backup & Restore
   - Export to CSV/JSON
   - Import from CSV/JSON
   - Auto-backup option

âœ… Settings & Customization
   - Currency selection
   - Theme (Light/Dark)
   - Date format
   - PIN lock (framework ready)
   - Categories management

âœ… User Interface
   - Material Design (KivyMD)
   - Bottom navigation
   - Responsive layouts
   - Smooth animations
   - Icon-based categories


===========================================
FUTURE ENHANCEMENTS
===========================================

ðŸ”® Potential Features:
   - Receipt photo attachment
   - Biometric authentication
   - Cloud sync (optional)
   - Multi-currency exchange rates API
   - Calendar view of transactions
   - Advanced filtering and search
   - Budget alerts/notifications
   - Split transactions
   - Multiple user profiles
   - PDF report generation
   - Widget support
   - Dark/AMOLED theme


===========================================
SUPPORT & CONTACT
===========================================

For issues, questions, or contributions:
- Check troubleshooting section above
- Review logs for error messages
- Test on desktop before building APK


===========================================
LICENSE
===========================================

This project is for educational and personal use.


===========================================
VERSION HISTORY
===========================================

v1.0.0 (2025-10-04)
- Initial release
- All core features implemented
- Desktop and Android support


===========================================
END OF SETUP INSTRUCTIONS
===========================================

